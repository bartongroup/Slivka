openapi: 3.0.2
info:
  title: Slivka Web API
  version: "1.0"

servers:
- url: https://www.compbio.dundee.ac.uk/slivka
  description: Compbio Public Server

tags:
- name: services
  description: Services availability and tasks submisison.
- name: files
  description: Uploading and downloading data files.
- name: tasks
  description: Task status and results.

paths:
  /api/version:
    get:
      summary: Returns version information of the Slivka instance and the API
      responses:
        '200':
          description: Service version information
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                    example: 200
                  slivka:
                    description: Slivka system version.
                    type: string
                    example: "0.5a1"
                  api:
                    description: API specification version.
                    type: string
                    example: "1.0"

  /api/services:
    get:
      summary: Returns a list of available services.
      tags: [services]
      responses:
        '200':
          description: A list of available services
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                    example: 200
                  services:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          description: Short service identificator.
                          type: string
                          example: Clustalo
                        label:
                          description: Human-readable name of the service.
                          type: string
                          example: Clustal Omega - 1.2.4
                        URI:
                          description: Location of the service.
                          type: string
                          format: uri
                          example: /api/services/clustalo
                        classifiers:
                          description: Data tags annotating the service.
                          type: array
                          items:
                            type: string

  /api/services/{service}:
    get:
      summary: Returns the service information and possible submission parameters.
      tags: [services]
      parameters:
      - name: service
        in: path
        required: true
        description: Service name
        schema:
          type: string
      responses:
        '200':
          description: Service information and available submission parametes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                  name:
                    type: string
                  URI:
                    type: string
                    format: uri
                  fields:
                    type: array
                    items:
                      $ref: "#/components/schemas/FormField"
        '404':
          description: Specified service does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '503':
          description: Specified service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      summary: Submits a new job request.
      tags: [services]
      parameters:
      - name: service
        in: path
        required: true
        description: Service name
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        '202':
          description: Unique identifier of the submitted task
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                    example: 202
                  uuid:
                    type: string
                    format: uuid
                    example: 147a8f7a9da54fca93987b971b89286d
                  URI:
                    type: string
                    format: uri
                    example: /api/task/147a8f7a9da54fca93987b971b89286d

        '404':
          description: Specified service does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '503':
          description: Specified service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
        '420':
          description: Submitted form contains errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                    example: 420
                  error:
                    type: string
                    example: Incorrect data
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        errorCode:
                          type: string
                        message:
                          type: string
                      example:
                        field: num-iters
                        errorCode: max
                        message: Value must be less than 20

  /api/services/{service}/presets:
    get:
      summary: Returns the list of available presets for this service.
      tags: [services]
      parameters:
        - name: service
          in: path
          required: true
          description: Service name
          schema:
            type: string
      responses:
        '200':
          description: List of presets available for this service.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                  presets:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        values:
                          type: object
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /api/services/{service}/presets/{preset}:
    get:
      summary: Retrieve the preset
      tags: [services]
      parameters:
        - name: service
          in: path
          required: true
          description: Service name
          schema:
            type: string
        - name: preset
          in: path
          required: true
          description: Preset id
          schema:
            type: string
      responses:
        '200':
          description: Preset
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                  preset:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      description:
                        type: string
                      values:
                        type: object
        '404':
          description: Service or preset not found
          content:
            application/json:
              schema:
                $ref: '#components/schemas/NotFoundError'

  /api/servicemonitor:
    get:
      summary: Check the status of services and runners
      tags: [services]
      responses:
        '200':
          description: Service states
          content:
            application/json:
              schema:
                type: object
                properties:
                  states:
                    type: array
                    items:
                      type: object
                      properties:
                        service:
                          type: string
                        runner:
                          type: string
                        state:
                          enum:
                            - OK
                            - WARNING
                            - FAILURE
                          type: string
                        timestamp:
                          format: iso datetime
                          type: string


  /api/files:
    post:
      summary: Upload the file to the server
      tags: [files]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created file data
          content:
            application/json:
              schema:
                properties:
                  statuscode:
                    type: integer
                    example: 201
                  uuid:
                    type: string
                    format: uuid
                  title:
                    type: string
                  mimetype:
                    type: string
                  URI:
                    type: string
                    format: uri
                  contentURI:
                    type: string
                    format: uri
                
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '415':
          description: File type not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaTypeError'
        '507':
          description: Insuficient storage. File too large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientStorageError'

  /api/files/{uuid}:
    get:
      summary: Retrieve file metadata
      tags: [files]
      parameters:
      - name: uuid
        in: path
        required: true
        description: Unique file identifier
        schema:
          type: string
          format: uuid
          example: dd660bcf78bf4d90a67672c8d442da8c
      responses:
        '200':
          description: File metadata
          content:
            application/json:
              schema:
                allOf:
                - properties:
                    statuscode:
                      type: integer
                      example: 200
                - $ref: '#/components/schemas/File'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /media/uploads/{path}:
    get:
      summary: Download the content of the uploaded file.
      tags: [files]
      parameters:
        - name: path
          in: path
          required: true
          description: Path to the file
          schema:
            type: string
      responses:
        '200':
          description: File can be downloaded.
          content:
            "*/*":
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /media/tasks/{uuid}/{path}:
    get:
      summary: Download the content of the job output file.
      tags: [files]
      parameters:
        - name: uuid
          in: path
          required: true
          description: Unique identifier of the task.
          schema:
            type: string
        - name: path
          in: path
          required: true
          description: Path to the file
          schema:
            type: string
      responses:
        '200':
          description: File can be downloaded.
          content:
            "*/*":
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /api/tasks/{uuid}:
    get:
      summary: Check the status of the running task
      tags: [tasks]
      parameters:
      - name: uuid
        in: path
        required: true
        description: Unique task id issued on form submission
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Task status
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuscode:
                    type: integer
                    example: 200
                  status:
                    type: string
                    enum:
                    - pending
                    - accepted
                    - queued
                    - running
                    - completed
                    - failed
                    - error
                    - undefined
                  ready:
                    type: boolean
                  filesURI:
                    type: string
                    format: uri
                    example: /task/147a8f7a9da54fca93987b971b89286d/files
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /api/tasks/{uuid}/files:
    get:
      summary: Returns a list of output file identifiers
      tags: [tasks]
      parameters:
      - name: uuid
        in: path
        required: true
        description: Unique task id issued on form submission
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: A JSON array of file ids produced by the task.
          content:
            application/json:
              schema:
                properties:
                  statuscode:
                    type: integer
                    example: 200
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

components:
  schemas:
    FormField:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [integer, decimal, text, boolean, choice, file]
        label:
          type: string
        description:
          type: string
        required:
          type: boolean
        default:
          nullable: true
        min:
          type: number
          nullable: true
        max:
          type: number
          nullable: true
        minExclusive:
          type: boolean
          nullable: true
        maxExclusive:
          type: boolean
          nullable: true
        minLength:
          type: integer
          nullable: true
        maxLength:
          type: integer
          nullable: true
        choices:
          type: array
          nullable: true
          items:
            type: string
        mimetype:
          type: string
          nullable: true
        extension:
          type: string
          nullable: true
        maxSize:
          type: integer
          nullable: true
    
    File:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        mimetype:
          type: string
        URI:
          type: string
          format: uri
        contentURI:
          type: string
          format: uri

    NotFoundError:
      type: object
      properties:
        statuscode:
          type: integer
          example: 404
        error:
          type: string
          example: Not found

    ServiceUnavailableError:
      type: object
      properties:
        statuscode:
          type: integer
          example: 503
        error:
          type: string
          example: Service unavailable

    BadRequestError:
      type: object
      properties:
        statuscode:
          type: integer
          example: 400
        error:
          type: string
          example: Bad request

    UnauthorisedError:
      type: object
      properties:
        statuscode:
          type: integer
          example: 401
        error:
          type: string
          example: Unauthorized

    InsufficientStorageError:
      type: object
      properties:
        statuscode:
          type: integer
          example: 507
        error:
          type: string
          example: Insufficient storage

    UnsupportedMediaTypeError:
      type: object
      properties:
        statuscode:
          type: integer
          example: 415
        error:
          type: string
          example: Unsupported media type
...
